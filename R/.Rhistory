iris
dim(iris)
iris
dim(iris)
#conjunto de dados, quantidade de aleatórios, com ou sem repo, vetor de probabilidade
amostra = sample(c(0,1), 150, replace=TRUE, prob=c(0.5, 0.5))
amostra
length(amostra(amostra==1))
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(2345)
sample(c(100), 1)
summary(iris)
install.packages("sampling")
library(sampling)
#gerando estrato (conjunto de dados, vetor de colunas e vetor com tamanho dos estratos)
amostra_estrat = strata(iris, c("Species"), size=c(25,25,25), method="srswor")
amostra_estrat
summary(amostra_estrat)
infert
summary(infert)
120 / 248 * 100
round(120 / 248 * 100)
round(12 / 248 * 100)
round(120 / 248 * 100)
round(116 / 248 * 100)
amostra_infert = strata(infert, c("education"), size=c(5,48,47), metod="srswor")
amostra_infert = strata(infert, c("education"), size=c(5,48,47), method="srswor")
summary(amostra_infert)
install.packages("TeachingSampling")
library(TeachingSampling)
# total da população, intervalo
amostra_sist = S.SY(150, 10)
amostra_sist
amostra_sist_iris = iris[amostra_sist,]
amostra_sist_iris
iris
dim(iris)
#conjunto de dados, quantidade de aleatórios, com ou sem repo, vetor de probabilidade
amostra = sample(c(0,1), 150, replace=TRUE, prob=c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(2345)
sample(c(100), 1)
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
mean(jogadores)
median(jogadores)
quartis = quantile(jogadores)
quartis
sd(jogadores)
summary(jogadores)
#n de sucessos, n de experimentos, probabilidade
dbinom(3, 5, 0.5)
# 4 sinais de 4 tempos, prob = 0,1,2,3,4 sinais verdes?
dbinom(0, 4, 0.25)
dbinom(1, 4, 0.25)
dbinom(2, 4, 0.25)
dbinom(3, 4, 0.25)
dbinom(4, 4, 0.25)
#probabilidade cumulativa
pbinom(4,4, 0.25)
# prova 12 questões, acertar no chute 7 sendo que cada uma tem 4 alternativas
dbinom(7,12,0.25)
dbinom(12,12,0.25)
#média = 8, dp = 2; objeto < 6 kg
pnorm(6,8,2)
#média = 8, dp = 2; objeto > 6 kg
pnorm(6,8,2,lower.tail=F)
#ou
1 - pnorm(6,8,2)
#menos de 6 ou mais de 10 kg
pnorm(6,8,2) + pnorm(10,8,2,lower.tail=F)
#menos de 10 kg e mais de 8kg
pnorm(10,8,2) - pnorm(8,8,2)
#dados aleatórios normalmente distribuídos
x = xnorm(100)
#dados aleatórios normalmente distribuídos
x = rnorm(100)
x
#diagrama de normalidade
qqnorm(x)
qqline(x)
shapiro.test(x)
#média=75, amostra=9, dp=10, salario > 80 por hora?
pt(1.5, 8, lower.tail=F)
1 - pt(1.5, 8)
#6
(1500 - 1250) / 480
#6
pnorm(1500,1250,480)
#3
x = c (22,10,12,14,13,15)
median(x)
#Questão 4
dbinom(8,10,0.5)
#Questão 4
13/52
eleicao = read.csv(file.choose(), sep=";", header=T)
fix(eleicao)
plot(eleicao$DESPESAS, eleicao$SITUACAO)
summary(eleicao)
cor(eleicao$DESPESAS, eleicao$SITUACAO)
modelo = glm(SITUACAO ~ DESPESAS, data=eleicao, family="binomial")
summary(modelo)
plot(eleicao$DESPESAS, eleicao$SITUACAO, col='red', pch=20)
points(eleicao$DESPESAS, modelo$fitted.values, pch=4)
#prever com base em novos candidatos
prever_eleicao = read.csv(file.choose(), sep=";", header=T)
fix(prever_eleicao)
prever_eleicao$RESULT = predict(modelo, newdata=prever_eleicao, type="response")
prever_eleicao$RESULT
fix(prever_eleicao)
novela = matrix(c(19,6,43,32), nrow=2, byrow=T)
fix(novela)
rownames(novela) = c('Masculino','Feminino')
colnames(novela) = c('Assiste','Não assiste')
fix(novela)
chisq.test()
chisq.test(novela)
tratamento = read.csv(file.choose(), se=';', header=T)
fix(tratamento)
boxplot(tratamento$Horas ~ tratamento$Remedio)
#Anova de 1 fator
an = aov(Horas ~ Remedio, data=tratamento)
summary(an)
#Anova de 2 fatores
an2 = aov(Horas ~ Remedio * Sexo, data=tratamento)
summary(an2)
tukey = TukeyHSD(an)
tukey
plot(tukey)
boxplot(iris$Sepal.Width)
#sem outliers
boxplot(iris$Sepal.Width, outline=F)
#ver números do boxplot
boxplot.stats(iris$Sepal.Width)$out
#pacote outliers
install.packages('outliers')
library(outliers)
outlier(iris$Sepal.Width)
outlier(iris$Sepal.Width, opposite=T)
#Questão 2
dpois(12,10)
#Questão 4
jogos = matrix(c(41,34,18,7), nrow=2, byrow=T)
fix(jogos)
rownames(jogos) = c('Masculino','Feminino')
colnames(jogos) = c('Joga','Não joga')
fix(jogos)
chisq.test(jogos)

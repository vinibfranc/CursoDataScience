iris
dim(iris)
iris
dim(iris)
#conjunto de dados, quantidade de aleatórios, com ou sem repo, vetor de probabilidade
amostra = sample(c(0,1), 150, replace=TRUE, prob=c(0.5, 0.5))
amostra
length(amostra(amostra==1))
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(2345)
sample(c(100), 1)
summary(iris)
install.packages("sampling")
library(sampling)
#gerando estrato (conjunto de dados, vetor de colunas e vetor com tamanho dos estratos)
amostra_estrat = strata(iris, c("Species"), size=c(25,25,25), method="srswor")
amostra_estrat
summary(amostra_estrat)
infert
summary(infert)
120 / 248 * 100
round(120 / 248 * 100)
round(12 / 248 * 100)
round(120 / 248 * 100)
round(116 / 248 * 100)
amostra_infert = strata(infert, c("education"), size=c(5,48,47), metod="srswor")
amostra_infert = strata(infert, c("education"), size=c(5,48,47), method="srswor")
summary(amostra_infert)
install.packages("TeachingSampling")
library(TeachingSampling)
# total da população, intervalo
amostra_sist = S.SY(150, 10)
amostra_sist
amostra_sist_iris = iris[amostra_sist,]
amostra_sist_iris
iris
dim(iris)
#conjunto de dados, quantidade de aleatórios, com ou sem repo, vetor de probabilidade
amostra = sample(c(0,1), 150, replace=TRUE, prob=c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(2345)
sample(c(100), 1)
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
mean(jogadores)
median(jogadores)
quartis = quantile(jogadores)
quartis
sd(jogadores)
summary(jogadores)
#n de sucessos, n de experimentos, probabilidade
dbinom(3, 5, 0.5)
# 4 sinais de 4 tempos, prob = 0,1,2,3,4 sinais verdes?
dbinom(0, 4, 0.25)
dbinom(1, 4, 0.25)
dbinom(2, 4, 0.25)
dbinom(3, 4, 0.25)
dbinom(4, 4, 0.25)
#probabilidade cumulativa
pbinom(4,4, 0.25)
# prova 12 questões, acertar no chute 7 sendo que cada uma tem 4 alternativas
dbinom(7,12,0.25)
dbinom(12,12,0.25)
#média = 8, dp = 2; objeto < 6 kg
pnorm(6,8,2)
#média = 8, dp = 2; objeto > 6 kg
pnorm(6,8,2,lower.tail=F)
#ou
1 - pnorm(6,8,2)
#menos de 6 ou mais de 10 kg
pnorm(6,8,2) + pnorm(10,8,2,lower.tail=F)
#menos de 10 kg e mais de 8kg
pnorm(10,8,2) - pnorm(8,8,2)
#dados aleatórios normalmente distribuídos
x = xnorm(100)
#dados aleatórios normalmente distribuídos
x = rnorm(100)
x
#diagrama de normalidade
qqnorm(x)
qqline(x)
shapiro.test(x)
#média=75, amostra=9, dp=10, salario > 80 por hora?
pt(1.5, 8, lower.tail=F)
1 - pt(1.5, 8)
#6
(1500 - 1250) / 480
#6
pnorm(1500,1250,480)
#3
x = c (22,10,12,14,13,15)
median(x)
#Questão 4
dbinom(8,10,0.5)
#Questão 4
13/52
eleicao = read.csv(file.choose(), sep=";", header=T)
fix(eleicao)
plot(eleicao$DESPESAS, eleicao$SITUACAO)
summary(eleicao)
cor(eleicao$DESPESAS, eleicao$SITUACAO)
modelo = glm(SITUACAO ~ DESPESAS, data=eleicao, family="binomial")
summary(modelo)
plot(eleicao$DESPESAS, eleicao$SITUACAO, col='red', pch=20)
points(eleicao$DESPESAS, modelo$fitted.values, pch=4)
#prever com base em novos candidatos
prever_eleicao = read.csv(file.choose(), sep=";", header=T)
fix(prever_eleicao)
prever_eleicao$RESULT = predict(modelo, newdata=prever_eleicao, type="response")
prever_eleicao$RESULT
fix(prever_eleicao)
novela = matrix(c(19,6,43,32), nrow=2, byrow=T)
fix(novela)
rownames(novela) = c('Masculino','Feminino')
colnames(novela) = c('Assiste','Não assiste')
fix(novela)
chisq.test()
chisq.test(novela)
tratamento = read.csv(file.choose(), se=';', header=T)
fix(tratamento)
boxplot(tratamento$Horas ~ tratamento$Remedio)
#Anova de 1 fator
an = aov(Horas ~ Remedio, data=tratamento)
summary(an)
#Anova de 2 fatores
an2 = aov(Horas ~ Remedio * Sexo, data=tratamento)
summary(an2)
tukey = TukeyHSD(an)
tukey
plot(tukey)
boxplot(iris$Sepal.Width)
#sem outliers
boxplot(iris$Sepal.Width, outline=F)
#ver números do boxplot
boxplot.stats(iris$Sepal.Width)$out
#pacote outliers
install.packages('outliers')
library(outliers)
outlier(iris$Sepal.Width)
outlier(iris$Sepal.Width, opposite=T)
#Questão 2
dpois(12,10)
#Questão 4
jogos = matrix(c(41,34,18,7), nrow=2, byrow=T)
fix(jogos)
rownames(jogos) = c('Masculino','Feminino')
colnames(jogos) = c('Joga','Não joga')
fix(jogos)
chisq.test(jogos)
AirPassengers
AirPassengers
start(AirPassengers)
end(AirPassengers)
plot(AirPassengers)
plot(aggregate(AirPassengers))
monthplot(AirPassengers)
subst = window(AirPassengers, start=c(1960,1), end=c(1960,12))
subst
subst
#analisar somente em 1960
subst = window(AirPassengers, start=c(1960,1), end=c(1960,12))
plot(subst)
plot(AirPassengers)
#elemento de tendência, elemento de sazonalidade e elemento de aleatoriedade
dec = decompose(AirPassengers)
dec
dec$seasonal
dec$trend
dec$random
plot(dec$seasonal)
plot(dec$trend)
plot(dec$random)
plot(dec)
AirPassengers
#modo mais simples
mean(AirPassengers)
mean(window(AirPassengers, start=c(1960,1), end=c(1960,2)))
#média móvel (vai se ajustando)
install.packages('forecast')
library(forecast)
media_movel = ma(AirPassengers, order=12)
media_movel
previsao = forecast(media_movel, h=12)
previsao
plot(previsao)
arima
previsao2 = forecast(arima, h=12)
previsao2
previsao2 = forecast(arima, h=12)
previsao2
arima = auto.arima(AirPassengers)
arima
previsao2 = forecast(arima, h=12)
previsao2
plot(previsao2)
#pacotes: e1071 e klaR
install.packages("e1071", dependencies=T)
library(e1071)
credito = read.csv(file.choose(), se=",", header=T)
head(credito)
dim(credito)
#divisão de treino e teste (70/30)
amostra = sample(2, 1000, replace=T, prob=c(0.7,0.3))
amostra
amostra[amostra == 1]
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 2,]
dim(credito_treino)
dim(credito_teste)
#criação do modelo
#parâmetros => variável de resposta ~ atributos explicativos, dataset
modelo = naiveBayes(class ~ . , credito_treino)
modelo
class(modelo)
#avaliação de desempenho
predicao = predict(modelo, credito_teste)
predicao
confusao = table(credito_teste$class, predicao)
confusao
#taxa de acertos
taxa_acertos = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acertos
#taxa de erro
taxa_erros = (confusao[2] + confusao[3]) / sum(confusao)
taxa_erros
#simulando modelo em produção
novo_credito = read.csv(file.choose(), sep=",", header=T)
novo_credito
dim(novo_credito)
predict(modelo, novo_credito)
install.packages("rpart", dependencies=T)
library(rpart)
credito = read.csv(file.choose(), sep=",", header=T)
arvore = rpart(class ~ ., data=credito_treino, method="class")
print(arvore)
plot(arvore)
text(arvore, use.n=T, all=T, cex=.8)
teste = predict(arvore, newdata=credito_teste)
teste
#binarizando
cred = cbind(credito_teste, teste)
fix(cred)
cred['Result'] = ifele(cred$bad >= 0.5, "bad", "good")
cred['Result'] = ifelse(cred$bad >= 0.5, "bad", "good")
fix(cred)
#matriz de confusão
confusao = table(cred$class, cred$Result)
confusao
taxa_acerto = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acerto
taxa_erro = (confusao[2] + confusao[3]) / sum(confusao)
taxa_erro
#usando SVM (support vector machine)
modelo = svm(class ~ ., credito_treino)
modelo
predicao = predict(modelo, credito_teste)
predicao
confusao = table(credito_teste$class, predicao)
confusao
taxa_acerto = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acerto
taxa_erro = (confusao[2] + confusao[3]) / sum(confusao)
taxa_erro
#fazendo seleção de atributos
install.packages("FSelector", dependencies=T)
library(FSelector)
#fazendo seleção de atributos
install.packages("FSelector", dependencies=T)
library(FSelector)
random.forest.importance(class ~ ., credito)
#criando novo modelo após seleção
modelo = svm(class ~ checking_status + duration + credit_history + purpose, credito_treino)
predicao = predict(modelo, credito_teste)
#usando 4 atributos mais relevantes
confusao = table(credito_teste$class, predicao)
confusao
taxa_acerto = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acerto
taxa_erro = (confusao[2] + confusao[3]) / sum(confusao)
taxa_erro
install.packages("class", dependencies=T)
install.packages("class", dependencies = T)
library(class)
head(iris)
summary(iris)
amostra = sample(2,150,replace=T,prob=c(0.7,0.3))
View(iris)
iris_treino = iris[amostra == 1,]
iris_teste = iris[amostra == 2,]
dim(iris_treino)
dim(iris_teste)
previsao = knn(iris_treino[,1:4], iris_treino[,5], k=3)
previsao = knn(iris_treino[,1:4], iris_teste[,5], k=3)
amostra = sample(2,150,replace=T,prob=c(0.7,0.3))
iris_treino = iris[amostra == 1,]
iris_teste = iris[amostra == 2,]
dim(iris_treino)
dim(iris_teste)
previsao = knn(iris_treino[,1:4], iris_teste[,5], k=3)
fim(iris)
fix(iris)
previsao = knn(iris_treino[,1:4], iris_teste[,1:4], iris_treino[,5], k=3)
table(iris_teste[,5], previsao)
install.packages("randomForest", dependencies=T)
library(randomForest)
floresta = randomForest(class ~ ., data=credito_treino, ntree=100, importance=T)
varImpPlot(floresta)
previsao = predict(floresta, credito_teste)
#matriz de confusão
confusao = table(previsao, credito_teste$class)
confusao
taxa_acerto = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acerto
taxa_erro = (confusao[2] + confusao[3]) / sum(confusao)
taxa_erro
dim(iris)
head(iris)
summary(iris)
#pegando todas as colunas menos a classe e definindo o n de clusters como 3
cluster = kmeans(iris[1:4], center=3)
cluster
table(iris$Species, cluster$cluster)
cluster$cluster
plot(iris[,1:4], col=cluster$cluster)
#cada elemento pode estar em mais de um grupo
library(e1071)
cluster = cmeans(iris[1:4], center=3)
cluster
cluster
table(iris$Species, iris$cluster)
table(iris$Species, cluster$cluster)
install.packages("cluster", dependencies=T)
library(cluster)
cluster = pam(iris[,1:4], k=3)
cluster
plot(cluster)
table(iris$Species, cluster$clustering)
plot(cluster)
cluster
cluster = pam(iris[,1:4], k=3)
cluster
plot(cluster)
table(iris$Species, cluster$clustering)
install.packages("arules")
library(arules)
transacoes = read.transactions(file.choose(), format="basket", sep=",")
transacoes
inspect(transacoes)
image(transacoes)
regras = apriori(transacoes, parameter=list(supp=0.5, conf=0.5))
inspect(regras)
install.packages("arulesViz")
library(arulesViz)
plot(regras)
plot(regras, method="graph", control=list(type="items"))
#itens frequentes
transacoes2 = read.transactions(file.choose(), format="basket", sep=",")
image(transacoes2)
regras2 = eclat(transacoes, parameter=list(supp=0.1, maxlen=15))
regras2 = eclat(transacoes2, parameter=list(supp=0.1, maxlen=15))
inspect(regras2)
plot(regras, method="graph", control=list(type="items"))
